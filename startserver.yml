---
- hosts: all
  become: true
  vars:
    created_username: druid

  tasks:
    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true
    
    - name: Update package cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Upgrade packages
      ansible.builtin.apt:
        upgrade: yes
        autoremove: yes
        autoclean: yes

    - name: Update apt and install required system packages
      ansible.builtin.apt:
        name:
          - curl
          - vim
          - git
          - ufw
          - wget
          - ncdu
          - make
          - build-essential
          - gcc
          - tree
          - jq
          - pkg-config
          - htop
          - fail2ban
        state: latest
        update_cache: true


    - name: Setup passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%sudo'
        line: '%sudo ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s' #проверка синтаксиса файла sudoers ( /etc/sudoers) после внесения изменений.

    - name: Create a new regular user with sudo privileges
      user:
        name: "{{ created_username }}"
        shell: /bin/bash    
        state: present
        groups: sudo
        append: true
        create_home: true

    - name: Set authorized key for remote user
      ansible.posix.authorized_key:
        user: "{{ created_username }}"
        state: present
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"


    - name: Configure SSH server
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        backup: yes
        regexp: '#?PermitRootLogin[ ](yes|no)'
        line: 'PermitRootLogin no'
      notify: 
        - Restart SSH service

    - name: Configure SSH server
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        backup: yes
        regexp: '#?ChallengeResponseAuthentication[ ](yes|no)'
        line: 'ChallengeResponseAuthentication no'
      notify: 
        - Restart SSH service

    - name: Configure SSH server
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        backup: yes
        regexp: '#?PasswordAuthentication[ ](yes|no)'
        line: 'PasswordAuthentication no'
      notify: 
        - Restart SSH service

    - name: Configure SSH server
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        backup: yes
        regexp: '#?PubkeyAuthentication[ ](yes|no)'
        line: 'PubkeyAuthentication yes'
      notify: 
        - Restart SSH service

    - name: UFW - Allow SSH connections
      community.general.ufw:
        rule: allow
        name: OpenSSH

    - name: UFW - Enable and deny by default
      community.general.ufw:
        state: enabled
        default: deny
      
  handlers: 
    - name: Restart SSH service
      service:
        name: sshd
        state: restarted
